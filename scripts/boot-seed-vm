#!/bin/bash
#
# Copyright 2013 Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -e

SCRIPT_NAME=$(basename $0)
SCRIPT_HOME=$(dirname $0)

PATH=$PATH:/usr/sbin:/sbin

# Some defaults
ARCH=i386
BRIDGE=brbm
IMAGE_NAME=seed
IMAGE_CACHE_DIR=${IMAGE_CACHE_DIR:-~/.cache/image-create/image-file-cache}
export DIB_IMAGE_SIZE=30
START_VM=yes
ALWAYS_ELEMENTS='vm local-config stackuser boot-stack nova-baremetal seed-stack-config remove-serial-console'
EXTRA_ELEMENTS=${EXTRA_ELEMENTS:-cloud-init-nocloud}
LIBVIRT_NIC_DRIVER=${LIBVIRT_NIC_DRIVER:-"e1000"}

function show_options () {
    echo "Usage: $SCRIPT_NAME [options] <element> [<element> ...]"
    echo
    echo "Create and start a VM by combining the specified elements"
    echo "with common default elements, assuming many things about"
    echo "the local operating environment."
    echo "See ../scripts/devtest.sh"
    echo
    echo "Options:"
    echo "      -a i386|amd64 -- set the architecture of the VM (i386)"
    echo "      -o name       -- set the name of the VM and image file (seed)"
    echo "      -s size       -- set the image size (30 GB)"
    echo "      -b bridge     -- define a baremetal bridge to use"
    echo "      -e engine     -- set the virt engine to use"
    echo "                       (defaults to kvm if available, otherwise qemu)"
    echo "      -c            -- use a image cache for seed image"
    echo "      -n            -- don't automatically start the VM"
    echo
    exit 0
}

TEMP=`getopt -o hcna:o:s:b:e: -n $SCRIPT_NAME -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
    case "$1" in
        -a) export ARCH=$2; shift 2 ;;
        -o) export IMAGE_NAME=$2; shift 2 ;;
        -s) export DIB_IMAGE_SIZE=$2; shift 2 ;;
        -b) export BRIDGE=$2; shift 2 ;;
        -e) export ENGINE=$2; shift 2 ;;
        -h) show_options;;
        -c) export IMAGE_CACHE_USE=1; shift ;;
        -n) export START_VM=; shift ;;
        --) shift ; break ;;
        *) echo "Error: unsupported option $1." ; exit 1 ;;
    esac
done

for arg do EXTRA_ELEMENTS="$EXTRA_ELEMENTS $arg" ; done

if [[ -z "$ENGINE" ]]; then
    if [ -d /sys/module/kvm ]; then
        ENGINE=kvm
    else
        ENGINE=qemu
        if test -r /proc/cpuinfo && grep -q "vmx\|svm" /proc/cpuinfo; then
            echo 'CPU supports virtualization but the kvm module is not loaded.'
        fi
        echo 'Using qemu as virtualization engine. Warning!: things will be extremely slow.'
    fi
fi

SEED_ARCH=

case $ARCH in
    i386) SEED_ARCH='i686'; ;;
    amd64) SEED_ARCH='x86_64'; ;;
    *) echo "Unsupported arch $ARCH!" ; exit 1 ;;
esac

ELEMENTS_PATH=${ELEMENTS_PATH:-$SCRIPT_HOME/../../tripleo-image-elements/elements}
export ELEMENTS_PATH

DIB_PATH=${DIB_PATH:-$SCRIPT_HOME/../../diskimage-builder}
DIB=$(which disk-image-create || echo $DIB_PATH/bin/disk-image-create)

if [ ! -e $DIB ]; then
    echo "Error: unable to locate disk-image-create"
    exit 1
fi

# Destroy pre-existing VM of the same name
# but ignore any errors if one doesn't exist
which virsh >/dev/null || die "Error: virsh not found in path"
sudo virsh destroy  $IMAGE_NAME 2>/dev/null || echo "$IMAGE_NAME not running"
sudo virsh undefine $IMAGE_NAME 2>/dev/null || echo "$IMAGE_NAME doesn't exist"

mkdir -p $IMAGE_CACHE_DIR
IMAGE_CACHE_FILE=$IMAGE_CACHE_DIR/$(echo $ARCH $ALWAYS_ELEMENTS $EXTRA_ELEMENTS | sha1sum | awk '{ print $1 }' )

# Create the image if it doesn't exist or we're not using image cache
if [ ! -e "$IMAGE_CACHE_FILE.qcow2" -o -z "$IMAGE_CACHE_USE" ] ; then
    $DIB -x -u -a $ARCH $ALWAYS_ELEMENTS $EXTRA_ELEMENTS -o $IMAGE_CACHE_FILE 2>&1 | tee $IMAGE_CACHE_FILE.log
else
    echo "Using cached seed image : $IMAGE_CACHE_FILE"
fi

sudo cp $IMAGE_CACHE_FILE.qcow2 /var/lib/libvirt/images/$IMAGE_NAME.qcow2

sudo chattr +C /var/lib/libvirt/images/$IMAGE_NAME.qcow2 || true

configure-vm \
           --name $IMAGE_NAME \
           --image /var/lib/libvirt/images/$IMAGE_NAME.qcow2 \
           --baremetal-interface $BRIDGE \
           --engine $ENGINE \
           --arch $SEED_ARCH \
           --libvirt-nic-driver $LIBVIRT_NIC_DRIVER \
	   --seed

VM_IP=''
function poll_vm {
  MAC=$(sudo virsh dumpxml $IMAGE_NAME | grep "mac address" | head -1 | awk -F "'" '{print $2}')
  VM_IP=$(arp -n | grep $MAC | awk '{print $1}')
}

if [ $START_VM ]; then
    sudo virsh start $IMAGE_NAME

    echo "Waiting for $IMAGE_NAME VM to boot."
    until [ -n "$VM_IP" ]; do
        poll_vm
        echo -n '.'
        sleep 1
    done

    echo
    echo "Booted. Found IP: $VM_IP. Waiting for ssh service to start."
    until echo '' | nc $VM_IP 22; do
        echo -n '.'
        sleep 1
    done
    echo

    # hostkeys are generated by cloud-init as part of the boot sequence - can
    # take a few seconds.
    echo "Waiting for SSH hostkey."
    SSH_ARGS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    until ssh $SSH_ARGS root@$VM_IP uptime 2>&1 > /dev/null; do
        echo -n '.'
        sleep 1
    done
    echo

    # Remove the 192.0.2.1 hostkey, new instance == new key.
    ssh-keygen -R 192.0.2.1 || true

    echo "element(s): $ALWAYS_ELEMENTS $EXTRA_ELEMENTS booted and ready."
    echo "SEED_IP=$VM_IP"
    echo
    echo "to login:   ssh root@$VM_IP"
    export VM_IP

else
    echo
    echo "VM $IMAGE_NAME created from element(s): $ALWAYS_ELEMENTS $EXTRA_ELEMENTS"
    echo
    echo "Start it with: sudo virsh start $IMAGE_NAME"
fi
