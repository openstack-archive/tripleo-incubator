#!/bin/bash
# Copyright 2014 Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

#
# Script to make cloud selection simple
#
set -eu
set -o pipefail
SCRIPT_NAME=$(basename $0)
SCRIPT_HOME=$(cd $(dirname $0); pwd)

function show_options () {
    echo "Usage: $SCRIPT_NAME <cloud>"
    echo
    echo "Options:"
    echo "    -h, --help                     -- print this help."
    echo
    echo "Echos the appropriate setup to interact with the requested cloud."
    echo "Choices for <cloud> are:"
    echo "        seed or s"
    echo "        undercloud or under or u"
    echo "        overcloud or over or o"
    echo
    echo "Run as follows to source the undercloud variables into the current shell:"
    echo "        source <( $SCRIPT_HOME/$SCRIPT_NAME undercloud )"
    echo
    exit $1
}

TEMP=`getopt -o h -l help -n $SCRIPT_NAME -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h|--help) show_options 0 >&2;;
        --) shift ; break;;
        *) echo "Error: unsupported option $1." ; exit 1;;
    esac
done

if (( $# != 1 )); then echo "Cloud to interact with is required" >&2; show_options 1 >&2; fi

set_common() {
    cat << EOF
update_tripleo_no_proxy() {
    add=\$1
    echo \$no_proxy | grep -wq \$1 || export no_proxy=\$no_proxy,\$1
}
EOF
    SAVE_TRIPLEO_ROOT=$TRIPLEO_ROOT
    # This file may not be there, depending on if the undercloud/overcloud are started yet
    echo "[[ -f tripleo-incubator/scripts/tripleorc ]] && . tripleo-incubator/scripts/tripleorc"
    # Need to reset TRIPLEO_ROOT after sourcing tripleorc
    echo "export TRIPLEO_ROOT=$TRIPLEO_ROOT"
    echo ". tripleo-incubator/scripts/devtest_variables.sh"
}

set_seed() {
    echo "export NOVA_VERSION=1.1"
    echo "export OS_PASSWORD=unset"
    echo "export OS_USERNAME=admin"
    echo "export OS_TENANT_NAME=admin"
    echo "export COMPUTE_API_VERSION=1.1"
    echo "export OS_NO_CACHE=True"
    echo "export SEED_IP=\$(os-apply-config -m \$TE_DATAFILE --type raw --key seed-ip)"
    echo "export OS_AUTH_URL=http://\${SEED_IP}:5000/v2.0"
    echo "update_tripleo_no_proxy \${SEED_IP}"
    echo "export UNDERCLOUD_ID=\$(glance image-list | grep undercloud | grep qcow2 | awk '{print \$2}' | head -1)"
    # Right now this seems to be hardcoded too many places to work without it
    echo "update_tripleo_no_proxy 192.0.2.1"
}

set_undercloud() {
    echo ". tripleo-incubator/scripts/tripleo-undercloud-passwords"
    echo ". tripleo-incubator/undercloudrc"
    echo "export UNDERCLOUD_IP=\$(os-apply-config -m \$TE_DATAFILE --type raw --key undercloud.endpointhost)"
    echo "update_tripleo_no_proxy \$UNDERCLOUD_IP"
}

set_overcloud() {
    echo ". tripleo-incubator/scripts/tripleo-overcloud-passwords"
    echo ". tripleo-incubator/overcloudrc-user"
    echo "export OVERCLOUD_IP=\$(os-apply-config -m \$TE_DATAFILE --type raw --key overcloud.endpointhost)"
    echo "update_tripleo_no_proxy \$OVERCLOUD_IP"
}

# Get the argument to show what cloud to interact with
case "$1" in
    s|seed) cloud=seed;;
    u|under|undercloud) cloud=undercloud;;
    o|over|overcloud) cloud=overcloud;;
    *) echo "Error: unsupported cloud $1." ; exit 1 ;;
esac

# Call the appropriate functions
TRIPLEO_ROOT=${TRIPLEO_ROOT:-~/.cache/tripleo}
echo pushd ${TRIPLEO_ROOT}
set_common
set_${cloud}
echo popd
