#!/usr/bin/env bash
#
# Copyright 2013 Red Hat
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

SCRIPT_NAME=$(basename $0)

LIBVIRT_VOL_POOL=${LIBVIRT_VOL_POOL:-"default"}

function show_options() {
    echo "Usage: $SCRIPT_NAME [option]"
    echo
    echo "    --clean-up-vm          -- Cleanup vm state left behind by previous runs."
    echo "    --power-off-IPMI-nodes [TE_DATAFILE]"
    echo "                           -- Power-off all nodes using IPMI power managment"
    echo "                              defined in the TE_DATAFILE."
    echo
    exit 1
}


TE_DATAFILE=
CLEANUP_VM=0

TEMP=$(getopt -o h -l power-off-IPMI-nodes:,clean-up-vm -n $SCRIPT_NAME -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
    case "$1" in
        --power-off-IPMI-nodes) TE_DATAFILE="$2"; shift 2;;
        --clean-up-vm) CLEANUP_VM="1"; shift 1;;
        -h) show_options 0;;
        --) shift; break;;
        *) echo "Error: unsupported option $1."; exit 1;;
    esac
done

if [ $CLEANUP_VM -eq 1 ]; then #nodocs

  for NAME in $(sudo virsh list --name --all | grep "^\(seed\(.*\|\)\|baremetal\(\|brbm.*\)_.*\)$"); do
    sudo virsh destroy $NAME
    sudo virsh undefine --managed-save --remove-all-storage $NAME
  done

  for NAME in $(sudo virsh vol-list $LIBVIRT_VOL_POOL 2>/dev/null | awk '/\/var\// {print $1}' | grep "^\(seed\(.*\|\)|baremetal\(\|brbm.*\)-\)" ); do
    sudo virsh vol-delete --pool $LIBVIRT_VOL_POOL $NAME
  done
fi #nodocs

if [[ -n "$TE_DATAFILE" && -f "$TE_DATAFILE" &&
      "$(jq .power_manager -r "$TE_DATAFILE")" = 'nova.virt.baremetal.ipmi.IPMI' ]]; then #nodocs

  BAREMETAL_NODES=$(jq '.nodes[] | .pm_addr,.pm_user,.pm_password,.pm_type' -r "$TE_DATAFILE")
  while read HOST && read USER && read PASSWORD && read PM_TYPE ; do
     if [ "$PM_TYPE" = 'nova.virt.baremetal.ipmi.IPMI' -o "$PM_TYPE" = "null" ]; then
         ipmitool -I lanplus -H "$HOST" -U "$USER" -P "$PASSWORD" power off
     fi
  done <<<"$BAREMETAL_NODES"
fi #nodocs
