#!/bin/bash
set -eu
set -o pipefail

if [ -z "$1" ]; then
    echo "Ironic not supported, please specify service host as the first argument."
    exit 1
fi
if [ -z "$2" ]; then
    echo "A JSON file of node listing is required"
    exit 1
fi
NODES=$(jq . "$2")

deploy_kernel=$TRIPLEO_ROOT/deploy-ramdisk.kernel
deploy_ramdisk=$TRIPLEO_ROOT/deploy-ramdisk.initramfs
deploy_kernel_id=$(glance image-create --name bm-deploy-kernel --public \
    --disk-format aki < "$deploy_kernel" | awk ' / id / {print $4}')
deploy_ramdisk_id=$(glance image-create --name bm-deploy-ramdisk --public \
    --disk-format ari < "$deploy_ramdisk" | awk ' / id / {print $4}')

function cleanup_flavor () {
    local FLAVOR_NAME=${1:?"cleanup_flavor requires a flavor name"}
    if nova flavor-show "$FLAVOR_NAME" &> /dev/null; then
        nova flavor-delete "$FLAVOR_NAME"
    fi
}

# While we can't mix hypervisors, having non-baremetal flavors will just
# confuse things.
cleanup_flavor 'm1.tiny'
cleanup_flavor 'm1.small'
cleanup_flavor 'm1.medium'
cleanup_flavor 'm1.large'
cleanup_flavor 'm1.xlarge'

if [ $USE_IRONIC -eq 0 ]; then
    # Ensure nova's baremetal service has fully initialised before proceeding with real nodes
    wait_for 60 10 nova baremetal-node-create devtest_canary 1 1 1 11:22:33:44:55:66
    nova baremetal-node-delete $(nova baremetal-node-list | awk '/devtest_canary/ {print $2}')
else
    # Ensure Ironic Service has fully initialised before proceeding
    wait_for 60 10 ironic chassis-create -d 'devtest_canary'
    ironic chassis-delete $(ironic chassis-list | awk '/devtest_canary/ {print $2}')
fi

node_count=$(($(jq length <<< $NODES) - 1))
for pos in $(seq 0 $node_count); do
    NODE_JSON=$(jq .[$pos] <<< $NODES)
    cleanup_flavor baremetal${pos}
    nova flavor-create baremetal${pos} auto $(jq -r '.memory + " " + .disk + " " + .cpu' <<< $NODE_JSON)
    nova flavor-key baremetal${pos} set "cpu_arch"=$(jq -r .arch <<< $NODE_JSON) \
        "baremetal:deploy_kernel_id"="$deploy_kernel_id" \
        "baremetal:deploy_ramdisk_id"="$deploy_ramdisk_id"
    if [ $USE_IRONIC -eq 0 ]; then
        # setup nova-baremetal nodes
        id=$(nova baremetal-node-create $SERVICE_HOST $(jq -r "\"--pm-addresses=\" + .[$pos][\"pm_addr\"] + \" --pm_user=\" + .[$pos][\"pm_user\"] + \" --pm_password=\" + .[$pos][\"pm_password\"] + " " + .[$pos][\"cpu\"] + " " + .[$pos][\"memory\"] + " " + .[$pos][\"disk\"] + " " + .[$pos][\"mac\"][0]" <<< $NODES) | awk '/ id / {print $4}')
        for mac in $(jq .[$pos][\"mac\"] - .[$pos][\"mac\"][0]); do
            nova baremetal-interface-add $id $mac
       done
    else
        # setup Ironic nodes
        PM_TYPE=$(jq -r ".[\"pm_type\"]" <<< $NODE_JSON)
        NODE_ID=$(ironic node-create -d $PM_TYPE | awk '$2=="uuid" { print $4 }')
        if [ -z "$NODE_ID" ]; then
            echo "Failed to get NODE_ID from created Ironic node."
            exit 1
        fi
        # Common properties.
        ironic node-update $NODE_ID add $(jq -r '"properties/cpus=" + .cpu + " properties/memory_mb=" + .memory + " properties/local_gb=" + .disk + " properties/cpu_arch=" + .arch' <<< $NODE_JSON)

        MAC_COUNT=$(($(jq ".mac | length" <<< $NODE_JSON) - 1))
        for pos in $(seq 0 $MAC_COUNT); do
            MAC=$(jq -r .mac[$pos] <<< $NODE_JSON)
            ironic port-create -a $MAC -n $NODE_ID
        done
        case "$PM_TYPE" in
        *ipmi*) 
            # pxe_ipminative / pxe_ipmitool
            ironic node-update $NODE_ID add $(jq -r '"driver_info/ipmi_address=" + .pm_addr + " driver_info/ipmi_username=" + .pm_user + " driver_info/ipmi_password=" + .pm_password' <<< $NODE_JSON) ;;
        pxe_ssh)
            # pxe_ssh
            ironic node-update $NODE_ID add $(jq -r '"driver_info/ssh_address=" + .pm_addr + " driver_info/ssh_username=" + .pm_user + " driver_info/ssh_key_filename=/mnt/state/var/lib/ironic/virtual-power-key driver_info/ssh_virt_type=virsh"' <<< $NODE_JSON) ;;
        *) echo "Unknown power type $PM_TYPE" ; exit 1 ;;
        esac
    fi
done

date
echo "Nodes will be available in 60 seconds from now."

