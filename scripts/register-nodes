#!/bin/bash
set -eu

CPU=$1
MEM=$2
DISK=$3
MACS="$4"
SERVICE_HOST="$5"
# Power management settings are optional and only used for real bare metal.
PM_IPS=( $6 )
PM_USERS=( $7 )
PM_PASSWORDS=( $8 )

if [[ $USE_IRONIC -eq 0 || $SERVICE_HOST == "seed" ]]; then
    # Ensure nova's baremetal service has fully initialised before proceeding with real nodes
    wait_for 60 10 nova baremetal-node-create devtest_canary 1 1 1 11:22:33:44:55:66
    nova baremetal-node-delete $(nova baremetal-node-list | awk '/devtest_canary/ {print $2}')
else
    # Ensure Ironic Service has fully initialised before proceeding
    wait_for 60 10 ironic chassis-create -d 'devtest_canary'
    ironic chassis-delete $(ironic chassis-list | awk '/devtest_canary/ {print $2}')
fi

count=0
for MAC in $MACS; do

    # TODO(NobodyCam): Remove OR (||) once Ironic is worked into seed vm
    if [[ $USE_IRONIC -eq 0 || $SERVICE_HOST == "seed" ]]; then
        # Nova Baremetal
        if [ -n "${PM_IPS:-}" -a -n "${PM_USERS:-}" -a -n "${PM_PASSWORDS:-}" ]; then
            nova baremetal-node-create --pm_address=${PM_IPS[$count]} --pm_user=${PM_USERS[$count]} --pm_password=${PM_PASSWORDS[$count]} $SERVICE_HOST $CPU $MEM $DISK $MAC
        else
            nova baremetal-node-create $SERVICE_HOST $CPU $MEM $DISK $MAC
        fi
    else
        # Ironic
        # check node driver per node
        # TODO(NobodyCam): Remove IRONIC_POWER_MANAGER once Ironic is in seed vm.
        IRONIC_NODE_ID=`ironic node-create -d ${IRONIC_POWER_MANAGER} | awk -F"|" '/ uuid/ { print $3 }' | tr -d ' '`
        ironic node-update $IRONIC_NODE_ID add properties/cpus=$CPU properties/memory_mb=$MEM properties/local_gb=$DISK properties/cpu_arch=${NODE_ARCH}
        ironic port-create -a $MAC -n $IRONIC_NODE_ID
        # TODO(NobodyCam): remove per_node_details once this file is refactored.
        per_node_details=$(jq -r '.nodes[] | {("mac"): .mac, ("type"): .virt_type, ("pm_user"): .pm_user, ("pm_addr"): .pm_addr} |  tostring ' $TE_DATAFILE | grep $MAC)
        if [[ $IRONIC_POWER_MANAGER == *ipmi* ]]; then
            # Ipmi
            echo "ironic node-update $IRONIC_NODE_ID add driver_info/ipmi_username=$PM_USERS driver_info/ipmi_password=$PM_PASSWORDS driver_info/ipmi_address=$PM_IPS"
            ironic node-update $IRONIC_NODE_ID add driver_info/ipmi_username=$PM_USERS driver_info/ipmi_password=$PM_PASSWORDS driver_info/ipmi_address=$PM_IPS
        else
            # ssh
            ssh_user=$(echo $per_node_details | jq '.pm_user' | tr -d '"')
            ssh_key="/mnt/state/opt/stack/boot-stack/virtual-power-key"
            ssh_host=$(echo $per_node_details | jq '.pm_addr' | tr -d '"')
            ssh_type=$(echo $per_node_details | jq '.type' | tr -d '"')
            echo "ironic node-update $IRONIC_NODE_ID add driver_info/ssh_address=$ssh_host driver_info/ssh_key_filename=$ssh_key driver_info/ssh_virt_type=$ssh_type driver_info/ssh_username=$ssh_user"
            ironic node-update $IRONIC_NODE_ID add driver_info/ssh_address=$ssh_host driver_info/ssh_key_filename=$ssh_key driver_info/ssh_virt_type=$ssh_type driver_info/ssh_username=$ssh_user
        fi
    fi
    count=$((count + 1))

done
date
echo "Nodes will be available in 60 seconds from now."
