#!/bin/bash
#
# Copyright 2013 Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -eu
set -o pipefail

SCRIPT_NAME=$(basename $0)
SCRIPT_HOME=$(dirname $0)

function show_options () {
    echo "Usage: $SCRIPT_NAME [options] <service-token> <keystone-endpoint> <admin-email> <keystone-ssh>"
    echo
    echo "Perform initial setup of keystone for a new cloud."
    echo
    echo "This will create the admin and service tenants, the admin and Member"
    echo "roles, and the admin user, and finally register the initial identity"
    echo "endpoint, without which regular credentials cannot be used."
    echo
    echo "Options:"
    echo "    -r, --region      -- Override the default region 'regionOne'."
    echo "    -p, --password    -- Choose the admin user password."
    echo "    -a                -- Choose the Heat Stack Domain Admin User password."
    echo "    --ssl             -- Use a SSL public endpoint."
    echo
    echo "For instance: $SCRIPT_NAME -p unset unset 192.0.2.1 admin@example.com root@192.0.2.1"
    echo "For instance(SSL): $SCRIPT_NAME -p unset --ssl mysite.org unset 192.0.2.1 admin@example.com root@192.0.2.1"
    exit $1
}

REGION="regionOne" #NB: This is the keystone default.
PASSWORD="" # Default to making a random one.
DOMAIN_ADMIN_PASSWORD="" # Default to making a random one.

TEMP=`getopt -o hr:p:a: -l help,region:,password:,ssl: -n $SCRIPT_NAME -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
    case "$1" in
        -r | --region) REGION=$2; shift 2 ;;
        -p | --password) PASSWORD=$2; shift 2 ;;
        -a) DOMAIN_ADMIN_PASSWORD=$2; shift 2 ;;
        -h) show_options 0;;
        --ssl) SSL=$2; shift 2 ;;
        --) shift ; break ;;
        *) echo "Error: unsupported option $1." ; exit 1 ;;
    esac
done

OS_TOKEN=${1:-""}
ENDPOINT=${2:-""}
ADMIN_EMAIL=${3:-""}
HOST=${4:-""}
EXTRA=${5:-""}

if [ -z "$OS_SERVICE_TOKEN" -o -z "$ENDPOINT" -o -z "$ADMIN_EMAIL" -o -z "$HOST" -o -n "$EXTRA" ]; then
    show_options 1
fi

export OS_URL=http://$ENDPOINT:35357/v3
export OS_TOKEN
# Setup PKI

# Determine the keystone user. For openSUSE with packages
# installed, the user is openstack-keystone. For all other
# cases it is simply keystone.
KEYSTONE_USER=keystone
if ssh -o StrictHostKeyChecking=no -t $HOST getent passwd openstack-keystone >/dev/null; then
    KEYSTONE_USER=openstack-keystone
fi

ssh -o StrictHostKeyChecking=no -t $HOST sudo keystone-manage pki_setup \
    --keystone-user $KEYSTONE_USER --keystone-group $KEYSTONE_USER

# Tenants
echo "Waiting for keystone to initialise..."
# FIXME: when undercloud uses wait conditions, this wait can be removed.
wait_for 60 10 "openstack --os-identity-api-version 3 project create admin"
ADMIN_PROJECT_ID=$(openstack --os-identity-api-version 3 project show admin | awk '$2=="id" {print $4}')
SERVICE_PROJECT_ID=$(openstack --os-identity-api-version 3 project create service | awk '$2=="id" {print $4}')

# Roles
ADMIN_ROLE_ID=$(openstack --os-identity-api-version 3 role create admin | awk '$2=="id" {print $4}')
MEMBER_ROLE_ID=$(openstack --os-identity-api-version 3 role create Member | awk '$2=="id" {print $4}')

# Creating these roles to be used by tenants using swift
openstack --os-identity-api-version 3 role create swiftoperator
openstack --os-identity-api-version 3 role create ResellerAdmin

# Users
ADMIN_USER_ID=$(openstack --os-identity-api-version 3 user create \
    --password="$PASSWORD" \
    --email="$ADMIN_EMAIL" \
    admin \
    | awk '$2=="id" {print $4}')

# Heat Domain
HEAT_DOMAIN_ID=$(openstack --os-identity-api-version 3 domain create heat \
    --os-identity-api-version=3 \
    --description "Owns users and projects created by heat" \
    | grep ' id ' | awk '$2=="id" {print $4}')
HEAT_DOMAIN_ADMIN_USER_ID=$(openstack --os-identity-api-version 3 user create --password "$DOMAIN_ADMIN_PASSWORD" \
    --domain $HEAT_DOMAIN_ID \
    --description "Manages users and projects created by heat" \
    heat_domain_admin \
    | grep ' id ' | awk '$2=="id" {print $4}')
openstack --os-identity-api-version 3 role add \
    --user $HEAT_DOMAIN_ADMIN_USER_ID --domain $HEAT_DOMAIN_ID admin

# User Roles
openstack --os-identity-api-version 3 role add \
    --user $ADMIN_USER_ID \
    --project $ADMIN_PROJECT_ID \
    $ADMIN_ROLE_ID
INTERNAL_URL=http://$ENDPOINT:5000
PUBLIC_URL=${SSL:+https://$SSL:13000}
PUBLIC_URL=${PUBLIC_URL:-$INTERNAL_URL}
register-endpoint -r $REGION -d "Keystone Identity Service" keystone identity -i http://$ENDPOINT:5000 -a http://$ENDPOINT:35357 $PUBLIC_URL
register-endpoint -r $REGION -d "Keystone Identity Service" keystone identity-v3 -i http://$ENDPOINT:5000 -a http://$ENDPOINT:35357 $PUBLIC_URL
