#!/bin/bash
#
# Copyright 2013-2014 Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -eu
set -o pipefail

SCRIPT_NAME=$(basename $0)
SCRIPT_HOME=$(dirname $0)

function show_options () {
    echo "Usage: $SCRIPT_NAME [options] [\$TE_DATAFILE]"
    echo
    echo "Reads a JSON file describing machines for a baremetal cluster and"
    echo "registers them all with Nova baremetal. Excess machines are removed"
    echo "and flavors are created to match the machines that have been"
    echo "registered using the local deploy-ramdisk and kernel, which are also"
    echo "loaded into glance."
    echo
    echo "For backwards compatibility a testenv data file may also be"
    echo "supplied as the first non-option argument, but this will be removed"
    echo "once tripleo-CI is updated."
    echo
    echo "One of --first and --not-first is required."
    echo
    echo "Options:"
    echo "      -h             -- this help"
    echo "      --service-host -- nova bm service host to register nodes with"
    echo "      --first        -- only select the first node"
    echo "      --not-first    -- select all but the first node"
    echo
    exit $1
}

SERVICE_HOST=""
NODE_SELECTION=0

TEMP=`getopt -o h -l help,service-host:,first,not-first -n $SCRIPT_NAME -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h | --help) show_options 0;;
        --service-host) SERVICE_HOST="$2"; shift 2 ;;
        --first) NODE_SELECTION=1 ; shift ;;
        --not-first) NODE_SELECTION=-1 ; shift ;;
        --) shift ; break ;;
        *) echo "Error: unsupported option $1." ; exit 1 ;;
    esac
done

BACKWARDS_COMPAT=${1:-''}
if [ -z "$SERVICE_HOST" ]; then
    echo "Ironic not supported, please specify --service-host."
    exit 1
fi
if [ $NODE_SELECTION -eq 0 ]; then
    echo "One of --first or --not-first is required."
    exit 1
fi

if [ -n "$BACKWARDS_COMPAT" ]; then
    # We have a backwards compat file, but we might have a new testenv - probe
    # to see.
    PROBE=$(jq -r '.nodes[0].cpu' $BACKWARDS_COMPAT)
    if [ "$PROBE" = "null" ]; then
        # No CPU data in the first node (may imply no first node..) so assume
        # we're working with a older CI testenv.
        # In that environment we use the environment variables
        CPU=$NODE_CPU
        MEM=$NODE_MEM
        DISK=$NODE_DISK
        ARCH=$NODE_ARCH
        # Plus MAC addresses and PM from the whole testenv file.
        if [ $NODE_SELECTION -eq 1 ]; then
            FIELDS="1"
        elif [ $NODE_SELECTION -eq -1 ]; then
            FIELDS="2-"
        fi
        MACS=$(OS_CONFIG_FILES=$BACKWARDS_COMPAT os-apply-config --key node-macs --type raw | cut -d' ' -f$FIELDS)
        PM_IPS=$(OS_CONFIG_FILES=$BACKWARDS_COMPAT os-apply-config --key node-pm-ips --type raw --key-default '' | cut -d' ' -f$FIELDS)
        PM_USERS=$(OS_CONFIG_FILES=$BACKWARDS_COMPAT os-apply-config --key node-pm-users --type raw --key-default '' | cut -d' ' -f$FIELDS)
        PM_PASSWORDS=$(OS_CONFIG_FILES=$BACKWARDS_COMPAT os-apply-config --key node-pm-passwords --type raw --key-default '' | cut -d' ' -f$FIELDS)
        MODE="legacy"
    else
        MODE="new"
    fi
else
    echo "A test environment file is required."
    exit 1
fi

echo $MODE
if [ "new" = "$MODE" ]; then
    if [ $NODE_SELECTION -eq 1 ]; then
        NODES=$(jq '[.nodes[0]]' $BACKWARDS_COMPAT)
    elif [ $NODE_SELECTION -eq -1 ]; then
        NODES=$(jq '.nodes - [.nodes[0]]' $BACKWARDS_COMPAT)
    fi
    # Backwards compat until we fix register-nodes / subsume it / whatever.
    # At that point heterogeneous node support becomes trivial.
    CPU=$(jq -r '.[0].cpu' <<< $NODES)
    MEM=$(jq -r '.[0].memory' <<< $NODES)
    DISK=$(jq -r '.[0].disk' <<< $NODES)
    ARCH=$(jq -r '.[0].arch' <<< $NODES)
    # Note: this takes only the first MAC - another legacy limit until we
    # refactor register-nodes.
    MACS=$(jq -r '.[] | .mac[0]' <<< $NODES)
    PM_IPS=$(jq -r '.[] | .pm_addr' <<< $NODES)
    PM_USERS=$(jq -r '.[] | .pm_user' <<< $NODES)
    PM_PASSWORDS=$(jq -r '.[] | .pm_password' <<< $NODES)
fi

# After we delete the backwards compat mode, register-nodes should have it's
# interface changed to just take the node vector - collapsing this script down
# to:
# register-nodes
# setup flavors
# register deploy ramdisk
register-nodes $CPU $MEM $DISK "$MACS" $SERVICE_HOST "$PM_IPS" "$PM_USERS" "$PM_PASSWORDS"

deploy_kernel=$TRIPLEO_ROOT/deploy-ramdisk.kernel
deploy_ramdisk=$TRIPLEO_ROOT/deploy-ramdisk.initramfs
deploy_kernel_id=$(glance image-create --name bm-deploy-kernel --public \
    --disk-format aki < "$deploy_kernel" | awk ' / id / {print $4}')
deploy_ramdisk_id=$(glance image-create --name bm-deploy-ramdisk --public \
    --disk-format ari < "$deploy_ramdisk" | awk ' / id / {print $4}')

function cleanup_flavor () {
    local FLAVOR_NAME=${1:?"cleanup_flavor requires a flavor name"}
    if nova flavor-show "$FLAVOR_NAME" &> /dev/null; then
        nova flavor-delete "$FLAVOR_NAME"
    fi
}

# While we can't mix hypervisors, having non-baremetal flavors will just
# confuse things.
cleanup_flavor 'm1.tiny'
cleanup_flavor 'm1.small'
cleanup_flavor 'm1.medium'
cleanup_flavor 'm1.large'
cleanup_flavor 'm1.xlarge'

cleanup_flavor 'baremetal'
# XXX(lifeless) this should be a loop making sure every node is represented
# with a flavor.
nova flavor-create baremetal auto $MEM $DISK $CPU
nova flavor-key baremetal set "cpu_arch"="$ARCH" \
    "baremetal:deploy_kernel_id"="$deploy_kernel_id" \
    "baremetal:deploy_ramdisk_id"="$deploy_ramdisk_id"
