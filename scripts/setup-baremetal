#!/bin/bash
#
# Copyright 2013-2014 Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

set -eu
set -o pipefail

SCRIPT_NAME=$(basename $0)
SCRIPT_HOME=$(dirname $0)

function show_options () {
    echo "Usage: $SCRIPT_NAME [options]"
    echo
    echo "Reads a JSON file describing machines for a baremetal cluster and"
    echo "registers them all with Nova baremetal. Excess machines are removed"
    echo "and flavors are created to match the machines that have been"
    echo "registered using the local deploy-ramdisk and kernel, which are also"
    echo "loaded into glance."
    echo
    echo "Options:"
    echo "      -h             -- this help"
    echo "      --service-host -- nova bm service host to register nodes with"
    echo "      --nodes        -- JSON list of nodes to register"
    echo "      --flavors      -- JSON list of flavors to create"
    echo
    exit $1
}

SERVICE_HOST=""
JSON_PATH=

TEMP=$(getopt -o h -l help,service-host:,nodes:,flavors: -n $SCRIPT_NAME -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h | --help) show_options 0;;
        --service-host) SERVICE_HOST="$2"; shift 2 ;;
        --nodes) JSON_PATH="$2"; shift 2 ;;
        --flavors) FLAVORS_PATH="$2"; shift 2 ;;
        --) shift ; break ;;
        *) echo "Error: unsupported option $1." ; exit 1 ;;
    esac
done

if [ -z "$SERVICE_HOST" ]; then
    echo "Ironic not supported, please specify --service-host."
    exit 1
fi
if [ -z "$JSON_PATH" ]; then
    echo "A node list is required."
    exit 1
fi

NODES=$(cat $JSON_PATH)
register-nodes $SERVICE_HOST <(echo $NODES)

if [ $USE_IRONIC -eq 0 ]; then
    deploy_base=deploy-ramdisk
else
    deploy_base=deploy-ramdisk-ironic
fi

deploy_kernel=$TRIPLEO_ROOT/$deploy_base.kernel
deploy_ramdisk=$TRIPLEO_ROOT/$deploy_base.initramfs
deploy_kernel_id=$(glance image-create --name bm-deploy-kernel --public \
    --disk-format aki < "$deploy_kernel" | awk ' / id / {print $4}')
deploy_ramdisk_id=$(glance image-create --name bm-deploy-ramdisk --public \
    --disk-format ari < "$deploy_ramdisk" | awk ' / id / {print $4}')


# Remove all flavors
flavor_ids=$(nova flavor-list | head -n -1 | tail -n +4 | cut -d" " -f2)
for flavor_id in flavor_ids; do
    nova flavor-delete ${flavor_id};
done

if [ -z "$FLAVORS_PATH" ] || [ ! -s "$FLAVORS_PATH" ]; then
    # if no flavors file specified, or if the specified file is empty
    # fallback to creating a single flavor called baremetal
    mem=$(jq -r '.[0]["memory"]' <<< $NODES)
    disk=$(jq -r '.[0]["disk"]' <<< $NODES)
    cpu=$(jq -r '.[0]["cpu"]' <<< $NODES)
    arch=$(jq -r '.[0]["arch"]' <<< $NODES)

    ephemeral_disk=$(( $disk - $ROOT_DISK ))
    if (( $ephemeral_disk < 0 )); then
        echo "Error: NODE_DISK - ROOT_DISK must be >= 0 to specify size of ephemeral disk"
        exit 1
    fi

    nova flavor-create baremetal \
        --ephemeral $ephemeral_disk auto $mem $ROOT_DISK $cpu
    nova flavor-key baremetal set "cpu_arch"="$arch" \
        "baremetal:deploy_kernel_id"="$deploy_kernel_id" \
        "baremetal:deploy_ramdisk_id"="$deploy_ramdisk_id"

else
    # we are creating user-defined flavors
    # these are in a json array of objects like:
    #     { "name": "my_flavor",
    #       "mem": 8192,
    #       "disk": 10,
    #       "cpu": 1,
    #       "arch": "i386",
    #       "extra_specs": {"foo":"bar"}
    #      }
    flavors=$(cat $FLAVORS_PATH)
    flavor_idxs=$(( $(jq -r length flavors) - 1 ))
    for pos in $(seq 0 $flavor_idxs); do
        name=$(jq -r '.[$pos]["name"]' <<< $flavors)

        mem=$(jq -r '.[$pos]["memory"]' <<< $flavors)
        disk=$(jq -r '.[$pos]["disk"]' <<< $flavors)
        cpu=$(jq -r '.[$pos]["cpu"]' <<< $flavors)
        arch=$(jq -r '.[$pos]["arch"]' <<< $flavors)

        ephemeral_disk=$(( $disk - $ROOT_DISK ))
        if (( $ephemeral_disk < 0 )); then
            echo "Error: NODE_DISK - ROOT_DISK must be >= 0 to specify size of ephemeral disk"
            exit 1
        fi

        extra_specs=$(jq -r '
            .[$pos]["extra_specs"] as $es |
            if $es then
                $es | keys[] | . + "=" + $es[.]
            else
                empty
            end' <<< $flavors)

        nova flavor-create $name \
            --ephemeral $ephemeral_disk auto $mem $ROOT_DISK $cpu
        nova flavor-key $name set "cpu_arch"="$arch" \
            "baremetal:deploy_kernel_id"="$deploy_kernel_id" \
            "baremetal:deploy_ramdisk_id"="$deploy_ramdisk_id" \
            $extra_specs
    done
fi
